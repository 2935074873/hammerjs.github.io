{"version":3,"file":"index.js","sources":["index.js","webpack/bootstrap 7bcdeafbd12ea3c3ee11","./src/assets/js/index.js","./src/assets/js/trackers.js","./src/assets/js/demo.js","./~/hammerjs/hammer.js","(webpack)/buildin/amd-options.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","d","s","js","fjs","getElementsByTagName","getElementById","createElement","src","parentNode","insertBefore","document","location","href","indexOf","_gaq","push","ga","type","async","protocol","resetElementStart","el","className","resetElementEnd","transform","translate","x","startX","y","startY","scale","rotate","requestElementUpdate","updateElementTransform","value","style","webkitTransform","join","ticking","reqAnimationFrame","onPan","ev","deltaX","deltaY","onSwipe","setTimeout","onPinch","onRotate","rotation","onTap","onDoubleTap","onHold","background","Hammer","window","prefixed","callback","querySelector","Math","round","offsetWidth","offsetHeight","mc","get","set","on","addEventListener","classList","toggle","__WEBPACK_AMD_DEFINE_RESULT__","undefined","each","obj","iterator","context","i","len","forEach","length","hasOwnProperty","extend","dest","merge","keys","Object","inherit","child","base","properties","childP","baseP","prototype","create","constructor","parent","Inherited","this","_super","bindFn","fn","apply","arguments","boolOrFn","val","args","TYPE_FUNCTION","addEventListeners","element","types","handler","splitStr","removeEventListeners","removeEventListener","hasParent","node","inStr","str","find","trim","split","inArray","findByKey","toArray","Array","slice","uniqueArray","key","results","values","property","prefix","prop","camelProp","toUpperCase","VENDOR_PREFIXES","uniqueId","_uniqueId","Input","manager","self","domHandler","options","enable","elEvents","winEvents","createInputInstance","Type","SUPPORT_POINTER_EVENTS","PointerEventInput","SUPPORT_ONLY_TOUCH","TouchInput","SUPPORT_TOUCH","TouchMouseInput","MouseInput","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","INPUT_START","isFinal","INPUT_END","session","computeInputData","recognize","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","srcEvent","deltaTime","angle","getAngle","distance","getDistance","offsetDirection","getDirection","getScale","getRotation","target","computeIntervalInputData","last","lastInterval","COMPUTE_INTERVAL","velocity","getVelocity","direction","max","velocityX","velocityY","clientX","clientY","abs","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","p1","p2","props","PROPS_XY","sqrt","atan2","PI","start","end","PROPS_CLIENT_XY","MOUSE_ELEMENT_EVENTS","MOUSE_WINDOW_EVENTS","allow","pressed","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","store","pointerEvents","TOUCH_EVENTS","targetIds","normalizeTouches","touchInput","targetTouches","changedTouches","changedTargetTouches","identifier","concat","_handler","touch","mouse","TouchAction","cleanTouchActions","actions","TOUCH_ACTION_NONE","TOUCH_ACTION_PAN_X","TOUCH_ACTION_PAN_Y","replace","action","test","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_AUTO","Recognizer","defaults","state","STATE_FAILED","simultaneous","requireFail","stateStr","STATE_CANCELLED","STATE_ENDED","STATE_CHANGED","STATE_BEGAN","directionStr","getRecognizerByNameIfManager","otherRecognizer","recognizer","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","Manager","defaultRecognizers","recognizers","item","add","recognizeWith","handlers","touchAction","toggleCssProps","cssProps","name","falseFn","userSelect","onselectstart","userDrag","ondragstart","triggerDomEvent","event","data","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","TYPE_UNDEFINED","MOBILE_REGEX","navigator","userAgent","INPUT_TYPE_TOUCH","INPUT_TYPE_PEN","INPUT_TYPE_MOUSE","INPUT_TYPE_KINECT","INPUT_MOVE","INPUT_CANCEL","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","destroy","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","mouseout","button","which","relatedTarget","toElement","nodeName","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM",2,3,4,5,"MSPointerEvent","removePointer","eventTypeNormalized","toLowerCase","storeIndex","pointerId","splice","TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","touches","inputEvent","inputData","isTouch","isMouse","PREFIXED_TOUCH_ACTION","body","NATIVE_TOUCH_ACTION","TOUCH_ACTION_COMPUTE","compute","update","getTouchAction","preventDefaults","prevented","preventDefault","hasNone","hasPanY","hasPanX","preventSrc","STATE_POSSIBLE","STATE_RECOGNIZED","option","emit","dropRecognizeWith","requireFailure","dropRequireFailure","index","canRecognizeWith","canRecognize","inputDataClone","process","reset","attrTest","optionPointers","isRecognized","isValid","threshold","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","clearTimeout","taps","interval","delay","movementBetween","movementWhile","validTouchTime","validInterval","validMultiTap","tapCount","VERSION","domEvents","touchSelect","touchCallout","contentZooming","tapHighlightColor","stop","force","stopped","curRecognizer","existing","remove","events","off","Tap","Pan","Swipe","Pinch","Rotate","Press","__webpack_amd_options__"],"mappings":"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","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/assets/js/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1);\n\t__webpack_require__(2);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t!function (d, s, id) {\n\t    var js, fjs = d.getElementsByTagName(s)[0];\n\t    if (!d.getElementById(id)) {\n\t        js = d.createElement(s);\n\t        js.id = id;\n\t        js.src = \"//platform.twitter.com/widgets.js\";\n\t        fjs.parentNode.insertBefore(js, fjs);\n\t    }\n\t}(document, \"script\", \"twitter-wjs\");\n\t\n\tif(location.href.indexOf(\"eightmedia.github.io\") > -1) {\n\t    var _gaq = _gaq || [];\n\t    _gaq.push(['_setAccount', 'UA-30289566-1']);\n\t    _gaq.push(['_trackPageview']);\n\t    (function () {\n\t        var ga = document.createElement('script');\n\t        ga.type = 'text/javascript';\n\t        ga.async = true;\n\t        ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';\n\t        var s = document.getElementsByTagName('script')[0];\n\t        s.parentNode.insertBefore(ga, s);\n\t    })();\n\t}\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Hammer = __webpack_require__(3);\n\t\n\t// polyfill\n\tvar reqAnimationFrame = (function () {\n\t    return window[Hammer.prefixed(window, 'requestAnimationFrame')] || function (callback) {\n\t        window.setTimeout(callback, 1000 / 60);\n\t    };\n\t})();\n\t\n\tvar el = document.querySelector(\"#hitarea\");\n\t\n\tvar startX = Math.round((el.parentNode.offsetWidth - el.offsetWidth) / 2);\n\tvar startY = Math.round((el.parentNode.offsetHeight - el.offsetHeight) / 2);\n\t\n\tvar ticking = false;\n\tvar transform;\n\t\n\tvar mc = new Hammer(el);\n\t\n\tmc.get('pinch').set('enable', true);\n\tmc.get('rotate').set('enable', true);\n\t\n\tmc.on(\"pan\", onPan);\n\tmc.on(\"swipe\", onSwipe);\n\tmc.on(\"rotate\", onRotate);\n\tmc.on(\"pinch\", onPinch);\n\tmc.on(\"tap\", onTap);\n\tmc.on(\"doubletap\", onDoubleTap);\n\tmc.on(\"hold\", onHold);\n\t\n\tmc.on(\"panstart rotatestart pinchstart\", resetElementStart);\n\tmc.on(\"panend rotateend pinchend pancancel rotatecancel pinchcancel\", resetElementEnd);\n\t\n\tfunction resetElementStart() {\n\t    el.className = '';\n\t}\n\t\n\tfunction resetElementEnd() {\n\t    transform = {\n\t        translate: { x: startX, y: startY },\n\t        scale: 1,\n\t        rotate: 0\n\t    };\n\t    el.className = 'animate';\n\t    requestElementUpdate();\n\t}\n\t\n\tfunction updateElementTransform() {\n\t    var value = [\n\t        'translate3d(' + transform.translate.x + 'px, ' + transform.translate.y + 'px, 0)',\n\t        'scale(' + transform.scale + ', ' + transform.scale + ')',\n\t        'rotate(' + transform.rotate + 'deg)'];\n\t    el.style.webkitTransform = el.style.transform = value.join(\" \");\n\t    ticking = false;\n\t}\n\t\n\tfunction requestElementUpdate() {\n\t    if(!ticking) {\n\t        ticking = true;\n\t        reqAnimationFrame(updateElementTransform);\n\t    }\n\t}\n\t\n\tfunction onPan(ev) {\n\t    transform.translate = {\n\t        x: startX + ev.deltaX,\n\t        y: startY + ev.deltaY\n\t    };\n\t    requestElementUpdate();\n\t}\n\t\n\tfunction onSwipe(ev) {\n\t    transform.translate = {\n\t        x: startX + (ev.deltaX * 1.2),\n\t        y: startY + (ev.deltaY * 1.2)\n\t    };\n\t    transform.scale = 1.2;\n\t    requestElementUpdate();\n\t\n\t    setTimeout(function () {\n\t        resetElementEnd();\n\t    }, 400);\n\t}\n\t\n\tfunction onPinch(ev) {\n\t    transform.scale = ev.scale;\n\t    requestElementUpdate();\n\t}\n\t\n\tfunction onRotate(ev) {\n\t    transform.rotate = ev.rotation;\n\t    requestElementUpdate();\n\t}\n\t\n\tfunction onTap(ev) {\n\t    transform.scale = .9;\n\t    requestElementUpdate();\n\t\n\t    setTimeout(function () {\n\t        transform.scale = 1;\n\t        requestElementUpdate();\n\t    }, 200);\n\t}\n\t\n\tfunction onDoubleTap(ev) {\n\t    transform.rotate = !transform.rotate ? 360 : 0;\n\t    requestElementUpdate();\n\t}\n\t\n\tfunction onHold(ev) {\n\t    el.style.background = '#fd0';\n\t    setTimeout(function () {\n\t        el.style.background = 'white';\n\t        requestElementUpdate();\n\t    }, 500);\n\t}\n\t\n\tresetElementEnd();\n\t\n\tdocument.querySelector(\".device .button\").addEventListener(\"click\", function(){\n\t    document.querySelector(\".device\").classList.toggle('hammertime');\n\t}, false);\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;(function(window, undefined) {\n\t  'use strict';\n\t\n\tvar VENDOR_PREFIXES = ['', 'webkit', 'moz', 'MS', 'ms', 'o'];\n\t\n\tvar TYPE_FUNCTION = 'function';\n\tvar TYPE_UNDEFINED = 'undefined';\n\t\n\t/**\n\t * walk objects and arrays\n\t * @param {Object} obj\n\t * @param {Function} iterator\n\t * @param {Object} context\n\t */\n\tfunction each(obj, iterator, context) {\n\t    var i, len;\n\t\n\t    if (obj.forEach) {\n\t        obj.forEach(iterator, context);\n\t    } else if (obj.length !== undefined) {\n\t        for (i = 0, len = obj.length; i < len; i++) {\n\t            iterator.call(context, obj[i], i, obj);\n\t        }\n\t    } else {\n\t        for (i in obj) {\n\t            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n\t        }\n\t    }\n\t}\n\t\n\t/**\n\t * extend object.\n\t * means that properties in dest will be overwritten by the ones in src.\n\t * @param {Object} dest\n\t * @param {Object} src\n\t * @param {Boolean} [merge]\n\t * @returns {Object} dest\n\t */\n\tfunction extend(dest, src, merge) {\n\t    var keys = Object.keys(src);\n\t    for (var i = 0, len = keys.length; i < len; i++) {\n\t        if (!merge || (merge && dest[keys[i]] === undefined)) {\n\t            dest[keys[i]] = src[keys[i]];\n\t        }\n\t    }\n\t    return dest;\n\t}\n\t\n\t/**\n\t * merge the values from src in the dest.\n\t * means that properties that exist in dest will not be overwritten by src\n\t * @param {Object} dest\n\t * @param {Object} src\n\t * @returns {Object} dest\n\t */\n\tfunction merge(dest, src) {\n\t    return extend(dest, src, true);\n\t}\n\t\n\t/**\n\t * simple class inheritance\n\t * @param {Function} child\n\t * @param {Function} base\n\t * @param {Object} [properties]\n\t */\n\tfunction inherit(child, base, properties) {\n\t    var baseP = base.prototype,\n\t        childP;\n\t\n\t    // object create is supported since IE9\n\t    if (Object.create) {\n\t        childP = child.prototype = Object.create(baseP);\n\t        childP.constructor = child;\n\t    } else {\n\t        extend(child, parent);\n\t        var Inherited = function() {\n\t            this.constructor = child;\n\t        };\n\t        Inherited.prototype = baseP;\n\t        childP = child.prototype = new Inherited();\n\t    }\n\t\n\t    if (properties) {\n\t        extend(childP, properties);\n\t    }\n\t\n\t    childP._super = baseP;\n\t}\n\t\n\t/**\n\t * simple function bind\n\t * @param {Function} fn\n\t * @param {Object} context\n\t * @returns {Function}\n\t */\n\tfunction bindFn(fn, context) {\n\t    return function() {\n\t        return fn.apply(context, arguments);\n\t    };\n\t}\n\t\n\t/**\n\t * let a boolean value also be a function that must return a boolean\n\t * this first item in args will be used as the context\n\t * @param {Boolean|Function} val\n\t * @param {Array} [args]\n\t * @returns {Boolean}\n\t */\n\tfunction boolOrFn(val, args) {\n\t    if (typeof val == TYPE_FUNCTION) {\n\t        return val.apply(args ? args[0] || window : window, args);\n\t    }\n\t    return val;\n\t}\n\t\n\t/**\n\t * addEventListener with multiple events at once\n\t * @param {HTMLElement} element\n\t * @param {String} types\n\t * @param {Function} handler\n\t */\n\tfunction addEventListeners(element, types, handler) {\n\t    each(splitStr(types), function(type) {\n\t        element.addEventListener(type, handler, false);\n\t    });\n\t}\n\t\n\t/**\n\t * removeEventListener with multiple events at once\n\t * @param {HTMLElement} element\n\t * @param {String} types\n\t * @param {Function} handler\n\t */\n\tfunction removeEventListeners(element, types, handler) {\n\t    each(splitStr(types), function(type) {\n\t        element.removeEventListener(type, handler, false);\n\t    });\n\t}\n\t\n\t/**\n\t * find if a node is in the given parent\n\t * @method hasParent\n\t * @param {HTMLElement} node\n\t * @param {HTMLElement} parent\n\t * @return {Boolean} found\n\t */\n\tfunction hasParent(node, parent) {\n\t    while (node) {\n\t        if (node == parent) {\n\t            return true;\n\t        }\n\t        node = node.parentNode;\n\t    }\n\t    return false;\n\t}\n\t\n\t/**\n\t * store Math.round in a var, for better minimisation\n\t */\n\tvar round = Math.round;\n\t\n\t/**\n\t * small indexOf wrapper\n\t * @param {String} str\n\t * @param {String} find\n\t * @returns {Boolean} found\n\t */\n\tfunction inStr(str, find) {\n\t    return str.indexOf(find) > -1;\n\t}\n\t\n\t/**\n\t * split string on whitespace\n\t * @param {String} str\n\t * @returns {Array} words\n\t */\n\tfunction splitStr(str) {\n\t    return str.trim().split(/\\s+/g);\n\t}\n\t\n\t/**\n\t * find if a array contains the object using indexOf or a simple polyFill\n\t * @param {Array} src\n\t * @param {String} find\n\t * @param {String} [findByKey]\n\t * @return {Boolean|Number} false when not found, or the index\n\t */\n\tfunction inArray(src, find, findByKey) {\n\t    if (src.indexOf && !findByKey) {\n\t        return src.indexOf(find);\n\t    } else {\n\t        for (var i = 0, len = src.length; i < len; i++) {\n\t            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n\t                return i;\n\t            }\n\t        }\n\t        return -1;\n\t    }\n\t}\n\t\n\t/**\n\t * convert array-like objects to real arrays\n\t * @param {Object} obj\n\t * @returns {Array}\n\t */\n\tfunction toArray(obj) {\n\t    return Array.prototype.slice.call(obj, 0);\n\t}\n\t\n\t/**\n\t * unique array with objects based on a key (like 'id') or just by the array's value\n\t * @param {Array} src [{id:1},{id:2},{id:1}]\n\t * @param {String} [key]\n\t * @returns {Array} [{id:1},{id:2}]\n\t */\n\tfunction uniqueArray(src, key) {\n\t    var results = [];\n\t    var values = [];\n\t    for (var i = 0, len = src.length; i < len; i++) {\n\t        var val = key ? src[i][key] : src[i];\n\t        if (inArray(values, val) < 0) {\n\t            results.push(src[i]);\n\t        }\n\t        values[i] = val;\n\t    }\n\t    return results;\n\t}\n\t\n\t/**\n\t * get the prefixed property\n\t * @param {Object} obj\n\t * @param {String} property\n\t * @returns {String|Undefined} prefixed\n\t */\n\tfunction prefixed(obj, property) {\n\t    var prefix, prop;\n\t    var camelProp = property[0].toUpperCase() + property.slice(1);\n\t\n\t    for (var i = 0, len = VENDOR_PREFIXES.length; i < len; i++) {\n\t        prefix = VENDOR_PREFIXES[i];\n\t        prop = (prefix) ? prefix + camelProp : property;\n\t\n\t        if (prop in obj) {\n\t            return prop;\n\t        }\n\t    }\n\t    return undefined;\n\t}\n\t\n\t/**\n\t * get a unique id\n\t * @returns {number} uniqueId\n\t */\n\tvar _uniqueId = 1;\n\tfunction uniqueId() {\n\t    return _uniqueId++;\n\t}\n\t\n\tvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\t\n\tvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\n\tvar SUPPORT_TOUCH = ('ontouchstart' in window);\n\tvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\t\n\tvar INPUT_TYPE_TOUCH = 'touch';\n\tvar INPUT_TYPE_PEN = 'pen';\n\tvar INPUT_TYPE_MOUSE = 'mouse';\n\tvar INPUT_TYPE_KINECT = 'kinect';\n\t\n\tvar COMPUTE_INTERVAL = 25;\n\t\n\tvar INPUT_START = 1;\n\tvar INPUT_MOVE = 2;\n\tvar INPUT_END = 4;\n\tvar INPUT_CANCEL = 8;\n\t\n\tvar DIRECTION_NONE = 1;\n\tvar DIRECTION_LEFT = 2;\n\tvar DIRECTION_RIGHT = 4;\n\tvar DIRECTION_UP = 8;\n\tvar DIRECTION_DOWN = 16;\n\t\n\tvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\n\tvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\n\tvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\t\n\tvar PROPS_XY = ['x', 'y'];\n\tvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\t\n\t/**\n\t * create new input type manager\n\t * @param {Manager} manager\n\t * @param {Function} callback\n\t * @returns {Input}\n\t * @constructor\n\t */\n\tfunction Input(manager, callback) {\n\t    var self = this;\n\t    this.manager = manager;\n\t    this.callback = callback;\n\t\n\t    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n\t    // so when disabled the input events are completely bypassed.\n\t    this.domHandler = function(ev) {\n\t        if (boolOrFn(self.manager.options.enable, [self.manager])) {\n\t            self.handler(ev);\n\t        }\n\t    };\n\t\n\t    this.elEvents && addEventListeners(this.manager.element, this.elEvents, this.domHandler);\n\t    this.winEvents && addEventListeners(window, this.winEvents, this.domHandler);\n\t}\n\t\n\tInput.prototype = {\n\t    destroy: function() {\n\t        this.elEvents && removeEventListeners(this.manager.element, this.elEvents, this.domHandler);\n\t        this.winEvents && removeEventListeners(window, this.winEvents, this.domHandler);\n\t    }\n\t};\n\t\n\t/**\n\t * create new input type manager\n\t * @param {Hammer} manager\n\t * @returns {Input}\n\t */\n\tfunction createInputInstance(manager) {\n\t    var Type;\n\t    if (SUPPORT_POINTER_EVENTS) {\n\t        Type = PointerEventInput;\n\t    } else if (SUPPORT_ONLY_TOUCH) {\n\t        Type = TouchInput;\n\t    } else if (!SUPPORT_TOUCH) {\n\t        Type = MouseInput;\n\t    } else {\n\t        Type = TouchMouseInput;\n\t    }\n\t    return new (Type)(manager, inputHandler);\n\t}\n\t\n\t/**\n\t * handle input events\n\t * @param {Manager} manager\n\t * @param {String} eventType\n\t * @param {Object} input\n\t */\n\tfunction inputHandler(manager, eventType, input) {\n\t    var pointersLen = input.pointers.length;\n\t    var changedPointersLen = input.changedPointers.length;\n\t    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n\t    var isFinal = (eventType & INPUT_END && (pointersLen - changedPointersLen === 0));\n\t\n\t    input.isFirst = isFirst;\n\t    input.isFinal = isFinal;\n\t\n\t    if (isFirst) {\n\t        manager.session = {};\n\t    }\n\t    // source event is the normalized value of the domEvents\n\t    // like 'touchstart, mouseup, pointerdown'\n\t    input.eventType = eventType;\n\t\n\t    // compute scale, rotation etc\n\t    computeInputData(manager, input);\n\t\n\t    manager.recognize(input);\n\t}\n\t\n\t/**\n\t * extend the data with some usable properties like scale, rotate, velocity etc\n\t * @param {Object} manager\n\t * @param {Object} input\n\t */\n\tfunction computeInputData(manager, input) {\n\t    var session = manager.session;\n\t    var pointers = input.pointers;\n\t    var pointersLength = pointers.length;\n\t\n\t    // store the first input to calculate the distance and direction\n\t    if (!session.firstInput) {\n\t        session.firstInput = simpleCloneInputData(input);\n\t    }\n\t\n\t    // to compute scale and rotation we need to store the multiple touches\n\t    if (pointersLength > 1 && !session.firstMultiple) {\n\t        session.firstMultiple = simpleCloneInputData(input);\n\t    } else if (pointersLength === 1) {\n\t        session.firstMultiple = false;\n\t    }\n\t\n\t    var firstInput = session.firstInput;\n\t    var firstMultiple = session.firstMultiple;\n\t    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\t    var center = getCenter(pointers);\n\t\n\t    input.timeStamp = input.srcEvent.timeStamp;\n\t    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\t    input.deltaX = center.x - offsetCenter.x;\n\t    input.deltaY = center.y - offsetCenter.y;\n\t\n\t    input.center = center;\n\t    input.angle = getAngle(offsetCenter, center);\n\t    input.distance = getDistance(offsetCenter, center);\n\t    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\t\n\t    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n\t    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\t\n\t    // find the correct target\n\t    var target = manager.element;\n\t    if (hasParent(input.srcEvent.target, target)) {\n\t        target = input.srcEvent.target;\n\t    }\n\t    input.target = target;\n\t\n\t    computeIntervalInputData(session, input);\n\t}\n\t\n\t/**\n\t * velocity is calculated every x ms\n\t * @param {Object} session\n\t * @param {Object} input\n\t */\n\tfunction computeIntervalInputData(session, input) {\n\t    var last = session.lastInterval;\n\t    if (!last) {\n\t        last = session.lastInterval = simpleCloneInputData(input);\n\t    }\n\t\n\t    var deltaTime = input.timeStamp - last.timeStamp;\n\t    if (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined) {\n\t        var deltaX = last.deltaX - input.deltaX;\n\t        var deltaY = last.deltaY - input.deltaY;\n\t\n\t        last = session.lastInterval = simpleCloneInputData(input);\n\t        last.velocity = getVelocity(deltaTime, deltaX, deltaY);\n\t        last.direction = getDirection(deltaX, deltaY);\n\t    }\n\t\n\t    var velocity = last.velocity;\n\t    input.velocity = Math.max(velocity.x, velocity.y);\n\t    input.velocityX = velocity.x;\n\t    input.velocityY = velocity.y;\n\t\n\t    input.direction = last.direction;\n\t}\n\t\n\t/**\n\t * create a simple clone from the input used for storage of firstInput and firstMultiple\n\t * @param {Object} input\n\t * @returns {Object} clonedInputData\n\t */\n\tfunction simpleCloneInputData(input) {\n\t    // make a simple copy of the pointers because we will get a reference if we don't\n\t    // we only need clientXY for the calculations\n\t    var pointers = [];\n\t    for (var i = 0; i < input.pointers.length; i++) {\n\t        pointers[i] = {\n\t            clientX: round(input.pointers[i].clientX),\n\t            clientY: round(input.pointers[i].clientY)\n\t        };\n\t    }\n\t\n\t    return {\n\t        timeStamp: input.srcEvent.timeStamp,\n\t        pointers: pointers,\n\t        center: getCenter(pointers),\n\t        deltaX: input.deltaX,\n\t        deltaY: input.deltaY\n\t    };\n\t}\n\t\n\t/**\n\t * get the center of all the pointers\n\t * @param {Array} pointers\n\t * @return {Object} center contains `x` and `y` properties\n\t */\n\tfunction getCenter(pointers) {\n\t    var pointersLength = pointers.length;\n\t\n\t    // no need to loop when only one touch\n\t    if (pointersLength === 1) {\n\t        return {\n\t            x: round(pointers[0].clientX),\n\t            y: round(pointers[0].clientY)\n\t        };\n\t    }\n\t\n\t    var x = 0, y = 0;\n\t    for (var i = 0; i < pointersLength; i++) {\n\t        x += pointers[i].clientX;\n\t        y += pointers[i].clientY;\n\t    }\n\t\n\t    return {\n\t        x: round(x / pointersLength),\n\t        y: round(y / pointersLength)\n\t    };\n\t}\n\t\n\t/**\n\t * calculate the velocity between two points. unit is in px per ms.\n\t * @param {Number} deltaTime\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @return {Object} velocity `x` and `y`\n\t */\n\tfunction getVelocity(deltaTime, x, y) {\n\t    return {\n\t        x: Math.abs(x / deltaTime) || 0,\n\t        y: Math.abs(y / deltaTime) || 0\n\t    };\n\t}\n\t\n\t/**\n\t * get the direction between two points\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @return {Number} direction\n\t */\n\tfunction getDirection(x, y) {\n\t    if (x === y) {\n\t        return DIRECTION_NONE;\n\t    }\n\t\n\t    if (Math.abs(x) >= Math.abs(y)) {\n\t        return x > 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n\t    }\n\t    return y > 0 ? DIRECTION_UP : DIRECTION_DOWN;\n\t}\n\t\n\t/**\n\t * calculate the absolute distance between two points\n\t * @param {Object} p1 {x, y}\n\t * @param {Object} p2 {x, y}\n\t * @param {Array} [props] containing x and y keys\n\t * @return {Number} distance\n\t */\n\tfunction getDistance(p1, p2, props) {\n\t    if (!props) {\n\t        props = PROPS_XY;\n\t    }\n\t    var x = p2[props[0]] - p1[props[0]],\n\t        y = p2[props[1]] - p1[props[1]];\n\t\n\t    return Math.sqrt((x * x) + (y * y));\n\t}\n\t\n\t/**\n\t * calculate the angle between two coordinates\n\t * @param {Object} p1\n\t * @param {Object} p2\n\t * @param {Array} [props] containing x and y keys\n\t * @return {Number} angle\n\t */\n\tfunction getAngle(p1, p2, props) {\n\t    if (!props) {\n\t        props = PROPS_XY;\n\t    }\n\t    var x = p2[props[0]] - p1[props[0]],\n\t        y = p2[props[1]] - p1[props[1]];\n\t    return Math.atan2(y, x) * 180 / Math.PI;\n\t}\n\t\n\t/**\n\t * calculate the rotation degrees between two pointersets\n\t * @param {Array} start array of pointers\n\t * @param {Array} end array of pointers\n\t * @return {Number} rotation\n\t */\n\tfunction getRotation(start, end) {\n\t    return getAngle(end[1], end[0], PROPS_CLIENT_XY) - getAngle(start[1], start[0], PROPS_CLIENT_XY);\n\t}\n\t\n\t/**\n\t * calculate the scale factor between two pointersets\n\t * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n\t * @param {Array} start array of pointers\n\t * @param {Array} end array of pointers\n\t * @return {Number} scale\n\t */\n\tfunction getScale(start, end) {\n\t    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n\t}\n\t\n\tvar MOUSE_INPUT_MAP = {\n\t    mousedown: INPUT_START,\n\t    mousemove: INPUT_MOVE,\n\t    mouseup: INPUT_END,\n\t    mouseout: INPUT_CANCEL\n\t};\n\t\n\tvar MOUSE_ELEMENT_EVENTS = 'mousedown';\n\tvar MOUSE_WINDOW_EVENTS = 'mousemove mouseout mouseup';\n\t\n\t/**\n\t * Mouse events input\n\t * @constructor\n\t */\n\tfunction MouseInput() {\n\t    this.elEvents = MOUSE_ELEMENT_EVENTS;\n\t    this.winEvents = MOUSE_WINDOW_EVENTS;\n\t\n\t    this.allow = true; // used by Input.TouchMouse to disable mouse events\n\t    this.pressed = false; // mousedown state\n\t\n\t    Input.apply(this, arguments);\n\t}\n\t\n\tinherit(MouseInput, Input, {\n\t    /**\n\t     * handle mouse events\n\t     * @param {Object} ev\n\t     */\n\t    handler: function(ev) {\n\t        var eventType = MOUSE_INPUT_MAP[ev.type];\n\t\n\t        // on start we want to have the left mouse button down\n\t        if (eventType & INPUT_START && ev.button === 0) {\n\t            this.pressed = true;\n\t        }\n\t\n\t        if (eventType & INPUT_MOVE && ev.which !== 1) {\n\t            eventType = INPUT_END;\n\t        }\n\t\n\t        // mouse must be down, and mouse events are allowed (see the TouchMouse input)\n\t        if (!this.pressed || !this.allow) {\n\t            return;\n\t        }\n\t\n\t        // out of the window?\n\t        var target = ev.relatedTarget || ev.toElement || ev.target;\n\t        if (ev.type == 'mouseout' && target.nodeName != 'HTML') {\n\t            eventType = INPUT_MOVE;\n\t        }\n\t\n\t        if (eventType & (INPUT_END | INPUT_CANCEL)) {\n\t            this.pressed = false;\n\t        }\n\t\n\t        this.callback(this.manager, eventType, {\n\t            pointers: [ev],\n\t            changedPointers: [ev],\n\t            pointerType: INPUT_TYPE_MOUSE,\n\t            srcEvent: ev\n\t        });\n\t    },\n\t});\n\t\n\tvar POINTER_INPUT_MAP = {\n\t    pointerdown: INPUT_START,\n\t    pointermove: INPUT_MOVE,\n\t    pointerup: INPUT_END,\n\t    pointercancel: INPUT_CANCEL,\n\t    pointerout: INPUT_CANCEL\n\t};\n\t\n\t// in IE10 the pointer types is defined as an enum\n\tvar IE10_POINTER_TYPE_ENUM = {\n\t    2: INPUT_TYPE_TOUCH,\n\t    3: INPUT_TYPE_PEN,\n\t    4: INPUT_TYPE_MOUSE,\n\t    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n\t};\n\t\n\tvar POINTER_ELEMENT_EVENTS = 'pointerdown pointermove pointerup pointercancel';\n\tvar POINTER_WINDOW_EVENTS = 'pointerout';\n\t\n\t// IE10 has prefixed support, and case-sensitive\n\tif (window.MSPointerEvent) {\n\t    POINTER_ELEMENT_EVENTS = 'MSPointerDown MSPointerMove MSPointerUp MSPointerCancel';\n\t    POINTER_WINDOW_EVENTS = 'MSPointerOut';\n\t}\n\t\n\t/**\n\t * Pointer events input\n\t * @constructor\n\t */\n\tfunction PointerEventInput() {\n\t    this.elEvents = POINTER_ELEMENT_EVENTS;\n\t    this.winEvents = POINTER_WINDOW_EVENTS;\n\t\n\t    Input.apply(this, arguments);\n\t\n\t    this.store = (this.manager.session.pointerEvents = []);\n\t}\n\t\n\tinherit(PointerEventInput, Input, {\n\t    /**\n\t     * handle mouse events\n\t     * @param {Object} ev\n\t     */\n\t    handler: function(ev) {\n\t        var store = this.store;\n\t        var removePointer = false;\n\t\n\t        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n\t        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n\t        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\t\n\t        // out of the window?\n\t        var target = ev.relatedTarget || ev.toElement || ev.target;\n\t        if (eventTypeNormalized == 'pointerout' && target.nodeName != 'HTML') {\n\t            eventType = INPUT_MOVE;\n\t        }\n\t\n\t        // start and mouse must be down\n\t        if (eventType & INPUT_START && (ev.button === 0 || pointerType == INPUT_TYPE_TOUCH)) {\n\t            store.push(ev);\n\t        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n\t            removePointer = true;\n\t        }\n\t\n\t        // get index of the event in the store\n\t        // it not found, so the pointer hasn't been down (so it's probably a hover)\n\t        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\t        if (storeIndex < 0) {\n\t            return;\n\t        }\n\t\n\t        // update the event in the store\n\t        store[storeIndex] = ev;\n\t\n\t        this.callback(this.manager, eventType, {\n\t            pointers: store,\n\t            changedPointers: [ev],\n\t            pointerType: pointerType,\n\t            srcEvent: ev\n\t        });\n\t\n\t        if (removePointer) {\n\t            // remove from the store\n\t            store.splice(storeIndex, 1);\n\t        }\n\t    }\n\t});\n\t\n\tvar TOUCH_INPUT_MAP = {\n\t    touchstart: INPUT_START,\n\t    touchmove: INPUT_MOVE,\n\t    touchend: INPUT_END,\n\t    touchcancel: INPUT_CANCEL\n\t};\n\t\n\tvar TOUCH_EVENTS = 'touchstart touchmove touchend touchcancel';\n\t\n\t/**\n\t * Touch events input\n\t * @constructor\n\t */\n\tfunction TouchInput() {\n\t    this.elEvents = TOUCH_EVENTS;\n\t    this.targetIds = {};\n\t\n\t    Input.apply(this, arguments);\n\t}\n\t\n\tinherit(TouchInput, Input, {\n\t    /**\n\t     * handle touch events\n\t     * @param {Object} ev\n\t     */\n\t    handler: function(ev) {\n\t        var touches = normalizeTouches(ev, this);\n\t        this.callback(this.manager, TOUCH_INPUT_MAP[ev.type], {\n\t            pointers: touches[0],\n\t            changedPointers: touches[1],\n\t            pointerType: INPUT_TYPE_TOUCH,\n\t            srcEvent: ev\n\t        });\n\t    }\n\t});\n\t\n\t/**\n\t * make sure all browsers return the same touches\n\t * @param {Object} ev\n\t * @param {TouchInput} touchInput\n\t * @returns {Array} [all, changed]\n\t */\n\tfunction normalizeTouches(ev, touchInput) {\n\t    var i, len;\n\t\n\t    var targetIds = touchInput.targetIds;\n\t    var targetTouches = toArray(ev.targetTouches);\n\t    var changedTouches = toArray(ev.changedTouches);\n\t    var changedTargetTouches = [];\n\t\n\t    // collect touches\n\t    if (ev.type == 'touchstart') {\n\t        for (i = 0, len = targetTouches.length; i < len; i++) {\n\t            targetIds[targetTouches[i].identifier] = true;\n\t        }\n\t    }\n\t\n\t    // filter changed touches to only contain touches that exist in the collected target ids\n\t    for (i = 0, len = changedTouches.length; i < len; i++) {\n\t        if (targetIds[changedTouches[i].identifier]) {\n\t            changedTargetTouches.push(changedTouches[i]);\n\t        }\n\t\n\t        // cleanup removed touches\n\t        if (ev.type == 'touchend'|| ev.type == 'touchcancel') {\n\t            delete targetIds[changedTouches[i].identifier];\n\t        }\n\t    }\n\t\n\t    return [\n\t        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n\t        // also removed the duplicates\n\t        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier'),\n\t\n\t        // only the changed :-)\n\t        changedTargetTouches\n\t    ];\n\t}\n\t\n\t/**\n\t * Combined touch and mouse input\n\t *\n\t * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n\t * This because touch devices also emit mouse events while doing a touch.\n\t *\n\t * @constructor\n\t */\n\tfunction TouchMouseInput() {\n\t    Input.apply(this, arguments);\n\t\n\t    this._handler = bindFn(this.handler, this);\n\t    this.touch = new TouchInput(this.manager, this._handler);\n\t    this.mouse = new MouseInput(this.manager, this._handler);\n\t}\n\t\n\tinherit(TouchMouseInput, Input, {\n\t    /**\n\t     * handle mouse and touch events\n\t     * @param {Hammer} manager\n\t     * @param {String} inputEvent\n\t     * @param {Object} inputData\n\t     */\n\t    handler: function(manager, inputEvent, inputData) {\n\t        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n\t            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\t\n\t        // when we're in a touch event, so  block all upcoming mouse events\n\t        // most mobile browser also emit mouseevents, right after touchstart\n\t        if (isTouch) {\n\t            this.mouse.allow = false;\n\t        } else if (isMouse && !this.mouse.allow) {\n\t            return;\n\t        }\n\t\n\t        // reset the allowMouse when we're done\n\t        if (inputEvent & (INPUT_END | INPUT_CANCEL)) {\n\t            this.mouse.allow = true;\n\t        }\n\t\n\t        this.callback(manager, inputEvent, inputData);\n\t    },\n\t\n\t    /**\n\t     * remove the event listeners\n\t     */\n\t    destroy: function() {\n\t        this.touch.destroy();\n\t        this.mouse.destroy();\n\t    }\n\t});\n\t\n\tvar PREFIXED_TOUCH_ACTION = prefixed(document.body.style, 'touchAction');\n\tvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\t\n\t// magical touchAction value\n\tvar TOUCH_ACTION_COMPUTE = 'compute';\n\t\n\tvar TOUCH_ACTION_AUTO = 'auto';\n\tvar TOUCH_ACTION_MANIPULATION = 'manipulation';\n\tvar TOUCH_ACTION_NONE = 'none';\n\tvar TOUCH_ACTION_PAN_X = 'pan-x';\n\tvar TOUCH_ACTION_PAN_Y = 'pan-y';\n\t\n\tfunction TouchAction(manager, value) {\n\t    this.manager = manager;\n\t    this.set(value);\n\t}\n\t\n\tTouchAction.prototype = {\n\t    /**\n\t     * set the touchAction value on the element or enable the polyfill\n\t     * @param {String} value\n\t     */\n\t    set: function(value) {\n\t        // find out the touch-action by the event handlers\n\t        if (value == TOUCH_ACTION_COMPUTE) {\n\t            value = this.compute();\n\t        }\n\t\n\t        if (NATIVE_TOUCH_ACTION) {\n\t            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n\t        }\n\t        this.actions = value.toLowerCase();\n\t    },\n\t\n\t    /**\n\t     * just re-set the touchAction value\n\t     */\n\t    update: function() {\n\t        this.set(this.manager.options.touchAction);\n\t    },\n\t\n\t    /**\n\t     * compute the value for the touchAction property based on the recognizer's settings\n\t     * @returns {String} value\n\t     */\n\t    compute: function() {\n\t        var value;\n\t        var actions = [];\n\t\n\t        each(this.manager.recognizers, function(recognizer) {\n\t            if (boolOrFn(recognizer.options.enable, recognizer)) {\n\t                actions = actions.concat(recognizer.getTouchAction());\n\t            }\n\t        });\n\t        value = uniqueArray(actions).join(' ');\n\t        return cleanTouchActions(value);\n\t    },\n\t\n\t    /**\n\t     * this method is called on each input cycle and provides the preventing of the browser behavior\n\t     * @param {Object} input\n\t     */\n\t    preventDefaults: function(input) {\n\t        // not needed with native support for the touchAction property\n\t        if (NATIVE_TOUCH_ACTION) {\n\t            return;\n\t        }\n\t\n\t        var srcEvent = input.srcEvent;\n\t        var direction = input.offsetDirection;\n\t\n\t        // if the touch action did prevented once this session\n\t        if (this.manager.session.prevented) {\n\t            srcEvent.preventDefault();\n\t            return;\n\t        }\n\t\n\t        var actions = this.actions;\n\t        var hasNone = inStr(actions, TOUCH_ACTION_NONE);\n\t        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\t        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n\t\n\t        if (hasNone || (hasPanY && hasPanX) ||\n\t            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n\t            (hasPanX && direction & DIRECTION_VERTICAL)) {\n\t            return this.preventSrc(srcEvent);\n\t        }\n\t    },\n\t\n\t    /**\n\t     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n\t     * @param {Object} srcEvent\n\t     */\n\t    preventSrc: function(srcEvent) {\n\t        this.manager.session.prevented = true;\n\t        srcEvent.preventDefault();\n\t    }\n\t};\n\t\n\t/**\n\t * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n\t * @param {String} actions\n\t * @returns {*}\n\t */\n\tfunction cleanTouchActions(actions) {\n\t    // none\n\t    if (inStr(actions, TOUCH_ACTION_NONE)) {\n\t        return TOUCH_ACTION_NONE;\n\t    }\n\t    // pan-x and pan-y can be combined\n\t    if (inStr(actions, TOUCH_ACTION_PAN_X) || inStr(actions, TOUCH_ACTION_PAN_Y)) {\n\t        return actions.replace(/[\\-\\w]+/g, function(action) {\n\t            if (/^pan\\-/.test(action)) {\n\t                return action;\n\t            }\n\t            return '';\n\t        });\n\t    }\n\t    // manipulation\n\t    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n\t        return TOUCH_ACTION_MANIPULATION;\n\t    }\n\t\n\t    return TOUCH_ACTION_AUTO;\n\t}\n\t\n\tvar STATE_POSSIBLE = 1;\n\tvar STATE_BEGAN = 2;\n\tvar STATE_CHANGED = 4;\n\tvar STATE_ENDED = 8;\n\tvar STATE_RECOGNIZED = STATE_ENDED;\n\tvar STATE_CANCELLED = 16;\n\tvar STATE_FAILED = 32;\n\t\n\t/**\n\t * Recognizer\n\t * @constructor\n\t * @param {Object} options\n\t */\n\tfunction Recognizer(options) {\n\t    this.id = uniqueId();\n\t\n\t    this.manager = null;\n\t    this.options = merge(options || {}, this.defaults || {});\n\t\n\t    // default is enable true\n\t    this.options.enable = (this.options.enable === undefined) ? true : this.options.enable;\n\t\n\t    this.state = STATE_FAILED;\n\t\n\t    this.simultaneous = {};\n\t    this.requireFail = [];\n\t}\n\t\n\tRecognizer.prototype = {\n\t    /**\n\t     * set options\n\t     * @param {String} option\n\t     * @param {*} val\n\t     */\n\t    set: function(option, val) {\n\t        this.options[option] = val;\n\t\n\t        // also update the touchAction, in case something changed about the directions/enabled state\n\t        this.manager && this.manager.touchAction.update();\n\t    },\n\t\n\t    /**\n\t     * default emitter\n\t     * @param {Object} input\n\t     */\n\t    emit: function(input) {\n\t        this.manager.emit(this.options.event + stateStr(this.state), input);\n\t    },\n\t\n\t    /**\n\t     * recognize simultaneous with an other recognizer.\n\t     * @param {Recognizer} otherRecognizer\n\t     * @returns {Recognizer} this\n\t     */\n\t    recognizeWith: function(otherRecognizer) {\n\t        var simultaneous = this.simultaneous;\n\t        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\t        if (!simultaneous[otherRecognizer.id]) {\n\t            simultaneous[otherRecognizer.id] = otherRecognizer;\n\t            otherRecognizer.recognizeWith(this);\n\t        }\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n\t     * @param {Recognizer} otherRecognizer\n\t     * @returns {Recognizer} this\n\t     */\n\t    dropRecognizeWith: function(otherRecognizer) {\n\t        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\t        delete this.simultaneous[otherRecognizer.id];\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * recognizer can only run when an other is failing\n\t     * @param {Recognizer} otherRecognizer\n\t     * @returns {Recognizer} this\n\t     */\n\t    requireFailure: function(otherRecognizer) {\n\t        var requireFail = this.requireFail;\n\t        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\t        if (inArray(requireFail, otherRecognizer) === -1) {\n\t            requireFail.push(otherRecognizer);\n\t            otherRecognizer.requireFailure(this);\n\t        }\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * drop the requireFailure link. it does not remove the link on the other recognizer.\n\t     * @param {Recognizer} otherRecognizer\n\t     * @returns {Recognizer} this\n\t     */\n\t    dropRequireFailure: function(otherRecognizer) {\n\t        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\t        var index = inArray(this.requireFail, otherRecognizer);\n\t        if (index > -1) {\n\t            this.requireFail.splice(index, 1);\n\t        }\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * if the recognizer can recognize simultaneous with an other recognizer\n\t     * @param {Recognizer} otherRecognizer\n\t     * @returns {Boolean}\n\t     */\n\t    canRecognizeWith: function(otherRecognizer) {\n\t        return !!this.simultaneous[otherRecognizer.id];\n\t    },\n\t\n\t    /**\n\t     * update the recognizer\n\t     * @param {Object} inputData\n\t     */\n\t    recognize: function(inputData) {\n\t        // require failure of other recognizers\n\t        var canRecognize = true;\n\t        for (var i = 0; i < this.requireFail.length; i++) {\n\t            if (!(this.requireFail[i].state & STATE_FAILED)) {\n\t                canRecognize = false;\n\t                break;\n\t            }\n\t        }\n\t\n\t        // make a new copy of the inputData\n\t        // so we can change the inputData without messing up the other recognizers\n\t        var inputDataClone = extend({}, inputData);\n\t\n\t        // is is enabled and allow recognizing?\n\t        if (!canRecognize || !boolOrFn(this.options.enable, [this, inputDataClone])) {\n\t            this.reset();\n\t            this.state = STATE_FAILED;\n\t            return;\n\t        }\n\t\n\t        // reset when we've reached the end\n\t        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n\t            this.state = STATE_POSSIBLE;\n\t        }\n\t\n\t        this.state = this.process(inputDataClone);\n\t\n\t        // the recognizer has recognized a gesture\n\t        // so trigger an event\n\t        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n\t            this.emit(inputDataClone);\n\t        }\n\t    },\n\t\n\t    /**\n\t     * return the state of the recognizer\n\t     * the actual recognizing happens in this method\n\t     * @virtual\n\t     * @param {Object} inputData\n\t     * @returns {Const} STATE_*\n\t     */\n\t    process: function(inputData) { }, // jshint ignore:line\n\t\n\t    /**\n\t     * return the preferred touch-action\n\t     * @virtual\n\t     * @returns {Array}\n\t     */\n\t    getTouchAction: function() { },\n\t\n\t    /**\n\t     * called when the gesture isn't allowed to recognize\n\t     * like when another is being recognized or it is disabled\n\t     * @virtual\n\t     */\n\t    reset: function() { }\n\t};\n\t\n\t/**\n\t * get a usable string, used as event postfix\n\t * @param {Const} state\n\t * @returns {String} state\n\t */\n\tfunction stateStr(state) {\n\t    if (state & STATE_CANCELLED) {\n\t        return 'cancel';\n\t    } else if (state & STATE_ENDED) {\n\t        return 'end';\n\t    } else if (state & STATE_CHANGED) {\n\t        return '';\n\t    } else if (state & STATE_BEGAN) {\n\t        return 'start';\n\t    }\n\t    return '';\n\t}\n\t\n\t/**\n\t * direction cons to string\n\t * @param {Const} direction\n\t * @returns {String}\n\t */\n\tfunction directionStr(direction) {\n\t    if (direction == DIRECTION_DOWN) {\n\t        return 'down';\n\t    } else if (direction == DIRECTION_UP) {\n\t        return 'up';\n\t    } else if (direction == DIRECTION_LEFT) {\n\t        return 'left';\n\t    } else if (direction == DIRECTION_RIGHT) {\n\t        return 'right';\n\t    }\n\t    return '';\n\t}\n\t\n\t/**\n\t * get a recognizer by name if it is bound to a manager\n\t * @param {Recognizer|String} otherRecognizer\n\t * @param {Recognizer} recognizer\n\t * @returns {Recognizer}\n\t */\n\tfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n\t    var manager = recognizer.manager;\n\t    if (manager) {\n\t        return manager.get(otherRecognizer);\n\t    }\n\t    return otherRecognizer;\n\t}\n\t\n\t/**\n\t * this recognizer is just used as a base for the simple\n\t * pan, pinch, rotate and swipe recognizers\n\t * @constructor\n\t */\n\tfunction AttrRecognizer() {\n\t    Recognizer.apply(this, arguments);\n\t}\n\t\n\tinherit(AttrRecognizer, Recognizer, {\n\t    defaults: {\n\t        pointers: 1\n\t    },\n\t\n\t    /**\n\t     * used to check if it the recognizer receives valid input, like input.distance > 10\n\t     * this should be overwritten\n\t     * @virtual\n\t     * @param {Object} input\n\t     * @returns {Boolean} recognized\n\t     */\n\t    attrTest: function(input) {\n\t        var optionPointers = this.options.pointers;\n\t        return optionPointers === 0 || input.pointers.length === optionPointers;\n\t    },\n\t\n\t    process: function(input) {\n\t        var state = this.state;\n\t        var eventType = input.eventType;\n\t\n\t        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n\t        var isValid = this.attrTest(input);\n\t\n\t        // on cancel input and we've recognized before, return STATE_CANCELLED\n\t        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n\t            return state | STATE_CANCELLED;\n\t        } else if (isRecognized || isValid) {\n\t            if (eventType & INPUT_END) {\n\t                return state | STATE_ENDED;\n\t            } else if (!(state & STATE_BEGAN)) {\n\t                return state | STATE_BEGAN;\n\t            }\n\t            return state | STATE_CHANGED;\n\t        }\n\t        return STATE_FAILED;\n\t    }\n\t});\n\t\n\tfunction PanRecognizer() {\n\t    AttrRecognizer.apply(this, arguments);\n\t\n\t    this.pX = null;\n\t    this.pY = null;\n\t}\n\t\n\tinherit(PanRecognizer, AttrRecognizer, {\n\t    defaults: {\n\t        event: 'pan',\n\t        threshold: 10,\n\t        pointers: 1,\n\t        direction: DIRECTION_ALL\n\t    },\n\t\n\t    getTouchAction: function() {\n\t        var direction = this.options.direction;\n\t\n\t        if (direction === DIRECTION_ALL) {\n\t            return [TOUCH_ACTION_NONE];\n\t        }\n\t\n\t        var actions = [];\n\t        if (direction & DIRECTION_HORIZONTAL) {\n\t            actions.push(TOUCH_ACTION_PAN_Y);\n\t        }\n\t        if (direction & DIRECTION_VERTICAL) {\n\t            actions.push(TOUCH_ACTION_PAN_X);\n\t        }\n\t        return actions;\n\t    },\n\t\n\t    directionTest: function(input) {\n\t        var options = this.options;\n\t        var hasMoved = true;\n\t        var distance = input.distance;\n\t        var direction = input.direction;\n\t        var x = input.deltaX;\n\t        var y = input.deltaY;\n\t\n\t        // lock to axis?\n\t        if (!(direction & options.direction)) {\n\t            if (options.direction & DIRECTION_HORIZONTAL) {\n\t                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n\t                hasMoved = x != this.pX;\n\t                distance = Math.abs(input.deltaX);\n\t            } else {\n\t                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n\t                hasMoved = y != this.pY;\n\t                distance = Math.abs(input.deltaY);\n\t            }\n\t        }\n\t        input.direction = direction;\n\t        return hasMoved && distance > options.threshold && direction & options.direction;\n\t    },\n\t\n\t    attrTest: function(input) {\n\t        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n\t            this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input));\n\t    },\n\t\n\t    emit: function(input) {\n\t        this.pX = input.deltaX;\n\t        this.pY = input.deltaY;\n\t\n\t        this._super.emit.call(this, input);\n\t\n\t        var direction = directionStr(input.direction);\n\t        if (direction) {\n\t            this.manager.emit(this.options.event + direction, input);\n\t        }\n\t    }\n\t});\n\t\n\tfunction PinchRecognizer() {\n\t    AttrRecognizer.apply(this, arguments);\n\t}\n\t\n\tinherit(PinchRecognizer, AttrRecognizer, {\n\t    defaults: {\n\t        event: 'pinch',\n\t        threshold: 0,\n\t        pointers: 2\n\t    },\n\t\n\t    getTouchAction: function() {\n\t        return [TOUCH_ACTION_PAN_X, TOUCH_ACTION_PAN_Y];\n\t    },\n\t\n\t    attrTest: function(input) {\n\t        return this._super.attrTest.call(this, input) &&\n\t            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n\t    },\n\t\n\t    emit: function(input) {\n\t        this._super.emit.call(this, input);\n\t        if (input.scale !== 1) {\n\t            var inOut = input.scale < 1 ? 'in' : 'out';\n\t            this.manager.emit(this.options.event + inOut, input);\n\t        }\n\t    }\n\t});\n\t\n\tfunction PressRecognizer() {\n\t    Recognizer.apply(this, arguments);\n\t\n\t    this._timer = null;\n\t    this._input = null;\n\t}\n\t\n\tinherit(PressRecognizer, Recognizer, {\n\t    defaults: {\n\t        event: 'press',\n\t        pointers: 1,\n\t        time: 500, // minimal time of the pointer to be pressed\n\t        threshold: 10 // a minimal movement is ok, but keep it low\n\t    },\n\t\n\t    getTouchAction: function() {\n\t        return [TOUCH_ACTION_AUTO];\n\t    },\n\t\n\t    process: function(input) {\n\t        var options = this.options;\n\t\n\t        var validPointers = input.pointers.length === options.pointers;\n\t        var validMovement = input.distance < options.threshold;\n\t        var validTime = input.deltaTime > options.time;\n\t\n\t        this._input = input;\n\t\n\t        // we only allow little movement\n\t        // and we've reached an end event, so a tap is possible\n\t        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n\t            this.reset();\n\t        } else if (input.eventType & INPUT_START) {\n\t            this.reset();\n\t            this._timer = setTimeout(bindFn(this.emit, this), options.time);\n\t        }\n\t        return STATE_FAILED;\n\t    },\n\t\n\t    reset: function() {\n\t        clearTimeout(this._timer);\n\t    },\n\t\n\t    emit: function() {\n\t        this.manager.emit(this.options.event, this._input);\n\t    }\n\t});\n\t\n\tfunction RotateRecognizer() {\n\t    AttrRecognizer.apply(this, arguments);\n\t}\n\t\n\tinherit(RotateRecognizer, AttrRecognizer, {\n\t    defaults: {\n\t        event: 'rotate',\n\t        threshold: 0,\n\t        pointers: 2\n\t    },\n\t\n\t    getTouchAction: function() {\n\t        return [TOUCH_ACTION_NONE];\n\t    },\n\t\n\t    attrTest: function(input) {\n\t        return this._super.attrTest.call(this, input) &&\n\t            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n\t    }\n\t});\n\t\n\tfunction SwipeRecognizer() {\n\t    AttrRecognizer.apply(this, arguments);\n\t}\n\t\n\tinherit(SwipeRecognizer, AttrRecognizer, {\n\t    defaults: {\n\t        event: 'swipe',\n\t        threshold: 10,\n\t        velocity: 0.65,\n\t        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n\t        pointers: 1\n\t    },\n\t\n\t    getTouchAction: function() {\n\t        return PanRecognizer.prototype.getTouchAction.call(this);\n\t    },\n\t\n\t    attrTest: function(input) {\n\t        var direction = this.options.direction;\n\t        var velocity;\n\t\n\t        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n\t            velocity = input.velocity;\n\t        } else if (direction & DIRECTION_HORIZONTAL) {\n\t            velocity = input.velocityX;\n\t        } else if (direction & DIRECTION_VERTICAL) {\n\t            velocity = input.velocityY;\n\t        }\n\t\n\t        return this._super.attrTest.call(this, input) &&\n\t            velocity > this.options.velocity && input.eventType & INPUT_END;\n\t    },\n\t\n\t    emit: function(input) {\n\t        this.manager.emit(this.options.event, input);\n\t\n\t        var direction = directionStr(input.direction);\n\t        if (direction) {\n\t            this.manager.emit(this.options.event + direction, input);\n\t        }\n\t    }\n\t});\n\t\n\tfunction TapRecognizer() {\n\t    Recognizer.apply(this, arguments);\n\t\n\t    // previous time and center,\n\t    // used for tap counting\n\t    this.pTime = false;\n\t    this.pCenter = false;\n\t\n\t    this._timer = null;\n\t    this._input = null;\n\t    this.count = 0;\n\t}\n\t\n\tinherit(TapRecognizer, Recognizer, {\n\t    defaults: {\n\t        event: 'tap',\n\t        pointers: 1,\n\t        taps: 1,\n\t        interval: 300, // max time between the multi-tap taps\n\t        delay: 0, // delay after triggering the tap. useful if you don't want to recognize a tap on each touchend\n\t        time: 250, // max time of the pointer to be down (like finger on the screen)\n\t        movementBetween: 10, // a multi-tap can be a bit off the initial position\n\t        movementWhile: 2 // a minimal movement is ok, but keep it low\n\t    },\n\t\n\t    getTouchAction: function() {\n\t        return [TOUCH_ACTION_MANIPULATION];\n\t    },\n\t\n\t    process: function(input) {\n\t        var self = this;\n\t        var options = this.options;\n\t\n\t        var validPointers = input.pointers.length === options.pointers;\n\t        var validMovement = input.distance < options.movementWhile;\n\t        var validTouchTime = input.deltaTime < options.time;\n\t\n\t        // we only allow little movement\n\t        // and we've reached an end event, so a tap is possible\n\t        if (input.eventType & INPUT_END && validMovement && validTouchTime && validPointers) {\n\t            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n\t            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.movementBetween;\n\t\n\t            this.pTime = input.timeStamp;\n\t            this.pCenter = input.center;\n\t\n\t            if (!validMultiTap || !validInterval) {\n\t                this.count = 1;\n\t            } else {\n\t                this.count += 1;\n\t            }\n\t\n\t            this._input = input;\n\t            this.reset();\n\t\n\t            // if tap count matches we have recognized it,\n\t            // else it has began recognizing...\n\t            var tapCount = this.count % options.taps;\n\t            if (tapCount === 0) {\n\t                if (!options.delay) {\n\t                    return STATE_RECOGNIZED;\n\t                } else {\n\t                    this._timer = setTimeout(function() {\n\t                        self.state = STATE_RECOGNIZED;\n\t                        self.emit();\n\t                    }, options.delay);\n\t                    return STATE_BEGAN;\n\t                }\n\t            }\n\t            if (!options.delay) {\n\t                return STATE_BEGAN;\n\t            }\n\t        }\n\t        return STATE_FAILED;\n\t    },\n\t\n\t    reset: function() {\n\t        clearTimeout(this._timer);\n\t    },\n\t\n\t    emit: function() {\n\t        if (this.state == STATE_RECOGNIZED) {\n\t            this._input.tapCount = this.count;\n\t            this.manager.emit(this.options.event, this._input);\n\t        }\n\t    }\n\t});\n\t\n\t/**\n\t * create an manager with a default set of recognizers\n\t * @param {HTMLElement} element\n\t * @param {Object} [options]\n\t * @constructor\n\t */\n\tfunction Hammer(element, options) {\n\t    options = options || {};\n\t    var manager = new Manager(element, options);\n\t\n\t    /**\n\t     * setup recognizers\n\t     * the defauls.recognizers contains an array like this;\n\t     * [ RecognizerClass, options, recognizeWith ],\n\t     * [ .... ]\n\t     */\n\t    var defaultRecognizers = manager.options.recognizers;\n\t    if (defaultRecognizers) {\n\t        each(defaultRecognizers, function(item) {\n\t            var recognizer = manager.add(new (item[0])(item[1]));\n\t            if (item[2]) {\n\t                recognizer.recognizeWith(item[2]);\n\t            }\n\t        });\n\t    }\n\t\n\t    return manager;\n\t}\n\t\n\tHammer.VERSION = '2.0.0dev';\n\t\n\tHammer.defaults = {\n\t    // when set to true, dom events are being triggered.\n\t    // but this is slower and unused by simple implementations, so disabled by default.\n\t    domEvents: false,\n\t\n\t    // this value is used when a touch-action isn't defined on the element.style\n\t    touchAction: TOUCH_ACTION_COMPUTE,\n\t\n\t    enable: true,\n\t\n\t    // default setup when calling Hammer()\n\t    recognizers: [\n\t        [RotateRecognizer, { enable: false }],\n\t        [PinchRecognizer, { enable: false }, 'rotate'],\n\t        [SwipeRecognizer,{ direction: DIRECTION_HORIZONTAL }],\n\t        [PanRecognizer, { direction: DIRECTION_HORIZONTAL }, 'swipe'],\n\t        [TapRecognizer],\n\t        [TapRecognizer, { event: 'doubletap', taps: 2 }, 'tap'],\n\t        [PressRecognizer]\n\t    ],\n\t\n\t    // with some style attributes you can improve the experience.\n\t    cssProps: {\n\t        // Disables text selection to improve the dragging gesture. When the value is `none` it also sets\n\t        // `onselectstart=false` for IE9 on the element. Mainly for desktop browsers.\n\t        userSelect: 'none',\n\t\n\t        // Disable the Windows Phone grippers when pressing an element.\n\t        touchSelect: 'none',\n\t\n\t        // Disables the default callout shown when you touch and hold a touch target.\n\t        // On iOS, when you touch and hold a touch target such as a link, Safari displays\n\t        // a callout containing information about the link. This property allows you to disable that callout.\n\t        touchCallout: 'none',\n\t\n\t        // Specifies whether zooming is enabled. Used by IE10>\n\t        contentZooming: 'none',\n\t\n\t        // Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n\t        userDrag: 'none',\n\t\n\t        // Overrides the highlight color shown when the user taps a link or a JavaScript\n\t        // clickable element in iOS. This property obeys the alpha value, if specified.\n\t        tapHighlightColor: 'rgba(0,0,0,0)'\n\t    }\n\t};\n\t\n\t/**\n\t * Manager\n\t * @param {HTMLElement} element\n\t * @param {Object} [options]\n\t * @constructor\n\t */\n\tfunction Manager(element, options) {\n\t    options = options || {};\n\t\n\t    this.options = merge(options, Hammer.defaults);\n\t\n\t    this.handlers = {};\n\t    this.session = {};\n\t    this.recognizers = [];\n\t\n\t    this.element = element;\n\t    this.input = createInputInstance(this);\n\t    this.touchAction = new TouchAction(this, this.options.touchAction);\n\t\n\t    toggleCssProps(this, true);\n\t}\n\t\n\tManager.prototype = {\n\t    /**\n\t     * set options\n\t     * @param {String} option\n\t     * @param {*} val\n\t     */\n\t    set: function(option, val) {\n\t        this.options[option] = val;\n\t    },\n\t\n\t    /**\n\t     * stop recognizing for this session.\n\t     * This session will be discarded, when a new [input]start event is fired.\n\t     * When forced, the recognizer cycle is stopped immediately.\n\t     * @param {Boolean} [force]\n\t     */\n\t    stop: function(force) {\n\t        this.session.stopped = force ? 2 : 1;\n\t    },\n\t\n\t    /**\n\t     * run the recognizers!\n\t     * called by the inputHandler function\n\t     * @param {Object} inputData\n\t     */\n\t    recognize: function(inputData) {\n\t        if (this.session.stopped) {\n\t            return;\n\t        }\n\t\n\t        this.touchAction.preventDefaults(inputData);\n\t\n\t        var recognizer;\n\t        var session = this.session;\n\t        var curRecognizer = session.curRecognizer;\n\t\n\t        // reset when the last recognizer is done, or this is a new session\n\t        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n\t            curRecognizer = session.curRecognizer = null;\n\t        }\n\t\n\t        // we're in a active recognizer\n\t        for (var i = 0, len = this.recognizers.length; i < len; i++) {\n\t            recognizer = this.recognizers[i];\n\t\n\t            if (this.session.stopped !== 2 && (\n\t                    !curRecognizer || recognizer == curRecognizer ||\n\t                    recognizer.canRecognizeWith(curRecognizer))) {\n\t                recognizer.recognize(inputData);\n\t            } else {\n\t                recognizer.reset();\n\t            }\n\t\n\t            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n\t                curRecognizer = session.curRecognizer = recognizer;\n\t            }\n\t        }\n\t    },\n\t\n\t    /**\n\t     * get a recognizer by its event name.\n\t     * @param {Recognizer|String} recognizer\n\t     * @returns {Recognizer|Null}\n\t     */\n\t    get: function(recognizer) {\n\t        if (recognizer instanceof Recognizer) {\n\t            return recognizer;\n\t        }\n\t\n\t        var recognizers = this.recognizers;\n\t        for (var i = 0; i < recognizers.length; i++) {\n\t            if (recognizers[i].options.event == recognizer) {\n\t                return recognizers[i];\n\t            }\n\t        }\n\t        return null;\n\t    },\n\t\n\t    /**\n\t     * add a recognizer to the manager\n\t     * existing recognizers with the same event name will be removed\n\t     * @param {Recognizer} recognizer\n\t     * @returns {Recognizer}\n\t     */\n\t    add: function(recognizer) {\n\t        // remove existing\n\t        var existing = this.get(recognizer.options.event);\n\t        if (existing) {\n\t            this.remove(existing);\n\t        }\n\t\n\t        this.recognizers.push(recognizer);\n\t        recognizer.manager = this;\n\t\n\t        this.touchAction.update();\n\t        return recognizer;\n\t    },\n\t\n\t    /**\n\t     * remove a recognizer by name or instance\n\t     * @param {Recognizer|String} recognizer\n\t     */\n\t    remove: function(recognizer) {\n\t        var recognizers = this.recognizers;\n\t        recognizer = this.get(recognizer);\n\t        recognizers.splice(inArray(recognizers, recognizer), 1);\n\t\n\t        this.touchAction.update();\n\t    },\n\t\n\t    /**\n\t     * bind event\n\t     * @param {String} events\n\t     * @param {Function} handler\n\t     * @returns {EventEmitter} this\n\t     */\n\t    on: function(events, handler) {\n\t        var handlers = this.handlers;\n\t        each(splitStr(events), function(event) {\n\t            handlers[event] = handlers[event] || [];\n\t            handlers[event].push(handler);\n\t        });\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * unbind event, leave emit blank to remove all handlers\n\t     * @param {String} events\n\t     * @param {Function} [handler]\n\t     * @returns {EventEmitter} this\n\t     */\n\t    off: function(events, handler) {\n\t        var handlers = this.handlers;\n\t        each(splitStr(events), function(event) {\n\t            if (!handler) {\n\t                delete handlers[event];\n\t            } else {\n\t                handlers[event].splice(inArray(handlers[event], handler), 1);\n\t            }\n\t        });\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * emit event to the listeners\n\t     * @param {String} event\n\t     * @param {Object} data\n\t     */\n\t    emit: function(event, data) {\n\t        // we also want to trigger dom events\n\t        if (this.options.domEvents) {\n\t            triggerDomEvent(event, data);\n\t        }\n\t\n\t        // no handlers, so skip it all\n\t        var handlers = this.handlers[event];\n\t        if (!handlers || !handlers.length) {\n\t            return;\n\t        }\n\t\n\t        data.type = event;\n\t        data.preventDefault = function() {\n\t            data.srcEvent.preventDefault();\n\t        };\n\t\n\t        for (var i = 0, len = handlers.length; i < len; i++) {\n\t            handlers[i](data);\n\t        }\n\t    },\n\t\n\t    /**\n\t     * destroy the manager and unbinds all events\n\t     * it doesn't unbind dom events, that is the user own responsibility\n\t     */\n\t    destroy: function() {\n\t        toggleCssProps(this, false);\n\t\n\t        this.handlers = {};\n\t        this.session = {};\n\t        this.input.destroy();\n\t        this.element = null;\n\t    }\n\t};\n\t\n\t/**\n\t * add/remove the css properties as defined in manager.options.cssProps\n\t * @param {Manager} manager\n\t * @param {Boolean} add\n\t */\n\tfunction toggleCssProps(manager, add) {\n\t    var element = manager.element;\n\t    var cssProps = manager.options.cssProps;\n\t\n\t    each(cssProps, function(value, name) {\n\t        element.style[prefixed(element.style, name)] = add ? value : '';\n\t    });\n\t\n\t    var falseFn = add && function() { return false; };\n\t    if (cssProps.userSelect == 'none') { element.onselectstart = falseFn; }\n\t    if (cssProps.userDrag == 'none') { element.ondragstart = falseFn; }\n\t}\n\t\n\t/**\n\t * trigger dom event\n\t * @param {String} event\n\t * @param {Object} data\n\t */\n\tfunction triggerDomEvent(event, data) {\n\t    var gestureEvent = document.createEvent('Event');\n\t    gestureEvent.initEvent(event, true, true);\n\t    gestureEvent.gesture = data;\n\t    data.target.dispatchEvent(gestureEvent);\n\t}\n\t\n\tHammer.INPUT_START = INPUT_START;\n\tHammer.INPUT_MOVE = INPUT_MOVE;\n\tHammer.INPUT_END = INPUT_END;\n\tHammer.INPUT_CANCEL = INPUT_CANCEL;\n\t\n\tHammer.STATE_POSSIBLE = STATE_POSSIBLE;\n\tHammer.STATE_BEGAN = STATE_BEGAN;\n\tHammer.STATE_CHANGED = STATE_CHANGED;\n\tHammer.STATE_ENDED = STATE_ENDED;\n\tHammer.STATE_RECOGNIZED = STATE_RECOGNIZED;\n\tHammer.STATE_CANCELLED = STATE_CANCELLED;\n\tHammer.STATE_FAILED = STATE_FAILED;\n\t\n\tHammer.DIRECTION_NONE = DIRECTION_NONE;\n\tHammer.DIRECTION_LEFT = DIRECTION_LEFT;\n\tHammer.DIRECTION_RIGHT = DIRECTION_RIGHT;\n\tHammer.DIRECTION_UP = DIRECTION_UP;\n\tHammer.DIRECTION_DOWN = DIRECTION_DOWN;\n\tHammer.DIRECTION_HORIZONTAL = DIRECTION_HORIZONTAL;\n\tHammer.DIRECTION_VERTICAL = DIRECTION_VERTICAL;\n\tHammer.DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\t\n\tHammer.Manager = Manager;\n\tHammer.Input = Input;\n\tHammer.TouchAction = TouchAction;\n\t\n\tHammer.Recognizer = Recognizer;\n\tHammer.AttrRecognizer = AttrRecognizer;\n\tHammer.Tap = TapRecognizer;\n\tHammer.Pan = PanRecognizer;\n\tHammer.Swipe = SwipeRecognizer;\n\tHammer.Pinch = PinchRecognizer;\n\tHammer.Rotate = RotateRecognizer;\n\tHammer.Press = PressRecognizer;\n\t\n\tHammer.on = addEventListeners;\n\tHammer.off = removeEventListeners;\n\tHammer.each = each;\n\tHammer.merge = merge;\n\tHammer.extend = extend;\n\tHammer.inherit = inherit;\n\tHammer.bindFn = bindFn;\n\tHammer.prefixed = prefixed;\n\t\n\tif ('function' == TYPE_FUNCTION && __webpack_require__(4)) {\n\t    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t        return Hammer;\n\t    }.call(exports, __webpack_require__, exports, module)), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else if (typeof module != TYPE_UNDEFINED && module.exports) {\n\t    module.exports = Hammer;\n\t} else {\n\t    window.Hammer = Hammer;\n\t}\n\t\n\t})(window);\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;\r\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, {}))\n\n/***/ }\n/******/ ])"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/assets/js/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);","require('./trackers.js');\nrequire('./demo.js');\n","!function (d, s, id) {\n    var js, fjs = d.getElementsByTagName(s)[0];\n    if (!d.getElementById(id)) {\n        js = d.createElement(s);\n        js.id = id;\n        js.src = \"//platform.twitter.com/widgets.js\";\n        fjs.parentNode.insertBefore(js, fjs);\n    }\n}(document, \"script\", \"twitter-wjs\");\n\nif(location.href.indexOf(\"eightmedia.github.io\") > -1) {\n    var _gaq = _gaq || [];\n    _gaq.push(['_setAccount', 'UA-30289566-1']);\n    _gaq.push(['_trackPageview']);\n    (function () {\n        var ga = document.createElement('script');\n        ga.type = 'text/javascript';\n        ga.async = true;\n        ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';\n        var s = document.getElementsByTagName('script')[0];\n        s.parentNode.insertBefore(ga, s);\n    })();\n}\n","var Hammer = require('../../../node_modules/hammerjs/hammer.js');\n\n// polyfill\nvar reqAnimationFrame = (function () {\n    return window[Hammer.prefixed(window, 'requestAnimationFrame')] || function (callback) {\n        window.setTimeout(callback, 1000 / 60);\n    };\n})();\n\nvar el = document.querySelector(\"#hitarea\");\n\nvar startX = Math.round((el.parentNode.offsetWidth - el.offsetWidth) / 2);\nvar startY = Math.round((el.parentNode.offsetHeight - el.offsetHeight) / 2);\n\nvar ticking = false;\nvar transform;\n\nvar mc = new Hammer(el);\n\nmc.get('pinch').set('enable', true);\nmc.get('rotate').set('enable', true);\n\nmc.on(\"pan\", onPan);\nmc.on(\"swipe\", onSwipe);\nmc.on(\"rotate\", onRotate);\nmc.on(\"pinch\", onPinch);\nmc.on(\"tap\", onTap);\nmc.on(\"doubletap\", onDoubleTap);\nmc.on(\"hold\", onHold);\n\nmc.on(\"panstart rotatestart pinchstart\", resetElementStart);\nmc.on(\"panend rotateend pinchend pancancel rotatecancel pinchcancel\", resetElementEnd);\n\nfunction resetElementStart() {\n    el.className = '';\n}\n\nfunction resetElementEnd() {\n    transform = {\n        translate: { x: startX, y: startY },\n        scale: 1,\n        rotate: 0\n    };\n    el.className = 'animate';\n    requestElementUpdate();\n}\n\nfunction updateElementTransform() {\n    var value = [\n        'translate3d(' + transform.translate.x + 'px, ' + transform.translate.y + 'px, 0)',\n        'scale(' + transform.scale + ', ' + transform.scale + ')',\n        'rotate(' + transform.rotate + 'deg)'];\n    el.style.webkitTransform = el.style.transform = value.join(\" \");\n    ticking = false;\n}\n\nfunction requestElementUpdate() {\n    if(!ticking) {\n        ticking = true;\n        reqAnimationFrame(updateElementTransform);\n    }\n}\n\nfunction onPan(ev) {\n    transform.translate = {\n        x: startX + ev.deltaX,\n        y: startY + ev.deltaY\n    };\n    requestElementUpdate();\n}\n\nfunction onSwipe(ev) {\n    transform.translate = {\n        x: startX + (ev.deltaX * 1.2),\n        y: startY + (ev.deltaY * 1.2)\n    };\n    transform.scale = 1.2;\n    requestElementUpdate();\n\n    setTimeout(function () {\n        resetElementEnd();\n    }, 400);\n}\n\nfunction onPinch(ev) {\n    transform.scale = ev.scale;\n    requestElementUpdate();\n}\n\nfunction onRotate(ev) {\n    transform.rotate = ev.rotation;\n    requestElementUpdate();\n}\n\nfunction onTap(ev) {\n    transform.scale = .9;\n    requestElementUpdate();\n\n    setTimeout(function () {\n        transform.scale = 1;\n        requestElementUpdate();\n    }, 200);\n}\n\nfunction onDoubleTap(ev) {\n    transform.rotate = !transform.rotate ? 360 : 0;\n    requestElementUpdate();\n}\n\nfunction onHold(ev) {\n    el.style.background = '#fd0';\n    setTimeout(function () {\n        el.style.background = 'white';\n        requestElementUpdate();\n    }, 500);\n}\n\nresetElementEnd();\n\ndocument.querySelector(\".device .button\").addEventListener(\"click\", function(){\n    document.querySelector(\".device\").classList.toggle('hammertime');\n}, false);\n","(function(window, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'moz', 'MS', 'ms', 'o'];\n\nvar TYPE_FUNCTION = 'function';\nvar TYPE_UNDEFINED = 'undefined';\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i, len;\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        for (i = 0, len = obj.length; i < len; i++) {\n            iterator.call(context, obj[i], i, obj);\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge]\n * @returns {Object} dest\n */\nfunction extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    for (var i = 0, len = keys.length; i < len; i++) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n    }\n    return dest;\n}\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nfunction merge(dest, src) {\n    return extend(dest, src, true);\n}\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    // object create is supported since IE9\n    if (Object.create) {\n        childP = child.prototype = Object.create(baseP);\n        childP.constructor = child;\n    } else {\n        extend(child, parent);\n        var Inherited = function() {\n            this.constructor = child;\n        };\n        Inherited.prototype = baseP;\n        childP = child.prototype = new Inherited();\n    }\n\n    if (properties) {\n        extend(childP, properties);\n    }\n\n    childP._super = baseP;\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || window : window, args);\n    }\n    return val;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {HTMLElement} element\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(element, types, handler) {\n    each(splitStr(types), function(type) {\n        element.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {HTMLElement} element\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(element, types, handler) {\n    each(splitStr(types), function(type) {\n        element.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * store Math.round in a var, for better minimisation\n */\nvar round = Math.round;\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        for (var i = 0, len = src.length; i < len; i++) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key) {\n    var results = [];\n    var values = [];\n    for (var i = 0, len = src.length; i < len; i++) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n    }\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    for (var i = 0, len = VENDOR_PREFIXES.length; i < len; i++) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(self.manager.options.enable, [self.manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.elEvents && addEventListeners(this.manager.element, this.elEvents, this.domHandler);\n    this.winEvents && addEventListeners(window, this.winEvents, this.domHandler);\n}\n\nInput.prototype = {\n    destroy: function() {\n        this.elEvents && removeEventListeners(this.manager.element, this.elEvents, this.domHandler);\n        this.winEvents && removeEventListeners(window, this.winEvents, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & INPUT_END && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = isFirst;\n    input.isFinal = isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    manager.recognize(input);\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n    var center = getCenter(pointers);\n\n    input.timeStamp = input.srcEvent.timeStamp;\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n    input.deltaX = center.x - offsetCenter.x;\n    input.deltaY = center.y - offsetCenter.y;\n\n    input.center = center;\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n\n    computeIntervalInputData(session, input);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval;\n    if (!last) {\n        last = session.lastInterval = simpleCloneInputData(input);\n    }\n\n    var deltaTime = input.timeStamp - last.timeStamp;\n    if (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined) {\n        var deltaX = last.deltaX - input.deltaX;\n        var deltaY = last.deltaY - input.deltaY;\n\n        last = session.lastInterval = simpleCloneInputData(input);\n        last.velocity = getVelocity(deltaTime, deltaX, deltaY);\n        last.direction = getDirection(deltaX, deltaY);\n    }\n\n    var velocity = last.velocity;\n    input.velocity = Math.max(velocity.x, velocity.y);\n    input.velocityX = velocity.x;\n    input.velocityY = velocity.y;\n\n    input.direction = last.direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    for (var i = 0; i < input.pointers.length; i++) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n    }\n\n    return {\n        timeStamp: input.srcEvent.timeStamp,\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0;\n    for (var i = 0; i < pointersLength; i++) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: Math.abs(x / deltaTime) || 0,\n        y: Math.abs(y / deltaTime) || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (Math.abs(x) >= Math.abs(y)) {\n        return x > 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y > 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) - getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END,\n    mouseout: INPUT_CANCEL\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseout mouseup';\n\n/**\n * Mouse events input\n * @constructor\n */\nfunction MouseInput() {\n    this.elEvents = MOUSE_ELEMENT_EVENTS;\n    this.winEvents = MOUSE_WINDOW_EVENTS;\n\n    this.allow = true; // used by Input.TouchMouse to disable mouse events\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down, and mouse events are allowed (see the TouchMouse input)\n        if (!this.pressed || !this.allow) {\n            return;\n        }\n\n        // out of the window?\n        var target = ev.relatedTarget || ev.toElement || ev.target;\n        if (ev.type == 'mouseout' && target.nodeName != 'HTML') {\n            eventType = INPUT_MOVE;\n        }\n\n        if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    },\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown pointermove pointerup pointercancel';\nvar POINTER_WINDOW_EVENTS = 'pointerout';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown MSPointerMove MSPointerUp MSPointerCancel';\n    POINTER_WINDOW_EVENTS = 'MSPointerOut';\n}\n\n/**\n * Pointer events input\n * @constructor\n */\nfunction PointerEventInput() {\n    this.elEvents = POINTER_ELEMENT_EVENTS;\n    this.winEvents = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        // out of the window?\n        var target = ev.relatedTarget || ev.toElement || ev.target;\n        if (eventTypeNormalized == 'pointerout' && target.nodeName != 'HTML') {\n            eventType = INPUT_MOVE;\n        }\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || pointerType == INPUT_TYPE_TOUCH)) {\n            store.push(ev);\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // get index of the event in the store\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n */\nfunction TouchInput() {\n    this.elEvents = TOUCH_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    /**\n     * handle touch events\n     * @param {Object} ev\n     */\n    handler: function(ev) {\n        var touches = normalizeTouches(ev, this);\n        this.callback(this.manager, TOUCH_INPUT_MAP[ev.type], {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * make sure all browsers return the same touches\n * @param {Object} ev\n * @param {TouchInput} touchInput\n * @returns {Array} [all, changed]\n */\nfunction normalizeTouches(ev, touchInput) {\n    var i, len;\n\n    var targetIds = touchInput.targetIds;\n    var targetTouches = toArray(ev.targetTouches);\n    var changedTouches = toArray(ev.changedTouches);\n    var changedTargetTouches = [];\n\n    // collect touches\n    if (ev.type == 'touchstart') {\n        for (i = 0, len = targetTouches.length; i < len; i++) {\n            targetIds[targetTouches[i].identifier] = true;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    for (i = 0, len = changedTouches.length; i < len; i++) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (ev.type == 'touchend'|| ev.type == 'touchcancel') {\n            delete targetIds[changedTouches[i].identifier];\n        }\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        // also removed the duplicates\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier'),\n\n        // only the changed :-)\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n */\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    this._handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, this._handler);\n    this.mouse = new MouseInput(this.manager, this._handler);\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        // when we're in a touch event, so  block all upcoming mouse events\n        // most mobile browser also emit mouseevents, right after touchstart\n        if (isTouch) {\n            this.mouse.allow = false;\n        } else if (isMouse && !this.mouse.allow) {\n            return;\n        }\n\n        // reset the allowMouse when we're done\n        if (inputEvent & (INPUT_END | INPUT_CANCEL)) {\n            this.mouse.allow = true;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nvar PREFIXED_TOUCH_ACTION = prefixed(document.body.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\n\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation';\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\n\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var value;\n        var actions = [];\n\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, recognizer)) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        value = uniqueArray(actions).join(' ');\n        return cleanTouchActions(value);\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        // not needed with native support for the touchAction property\n        if (NATIVE_TOUCH_ACTION) {\n            return;\n        }\n\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE);\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n\n        if (hasNone || (hasPanY && hasPanX) ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n    // pan-x and pan-y can be combined\n    if (inStr(actions, TOUCH_ACTION_PAN_X) || inStr(actions, TOUCH_ACTION_PAN_Y)) {\n        return actions.replace(/[\\-\\w]+/g, function(action) {\n            if (/^pan\\-/.test(action)) {\n                return action;\n            }\n            return '';\n        });\n    }\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.id = uniqueId();\n\n    this.manager = null;\n    this.options = merge(options || {}, this.defaults || {});\n\n    // default is enable true\n    this.options.enable = (this.options.enable === undefined) ? true : this.options.enable;\n\n    this.state = STATE_FAILED;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * set options\n     * @param {String} option\n     * @param {*} val\n     */\n    set: function(option, val) {\n        this.options[option] = val;\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n    },\n\n    /**\n     * default emitter\n     * @param {Object} input\n     */\n    emit: function(input) {\n        this.manager.emit(this.options.event + stateStr(this.state), input);\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // require failure of other recognizers\n        var canRecognize = true;\n        for (var i = 0; i < this.requireFail.length; i++) {\n            if (!(this.requireFail[i].state & STATE_FAILED)) {\n                canRecognize = false;\n                break;\n            }\n        }\n\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = extend({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!canRecognize || !boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.emit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE_*\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return '';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * this recognizer is just used as a base for the simple\n * pan, pinch, rotate and swipe recognizers\n * @constructor\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    defaults: {\n        pointers: 1\n    },\n\n    /**\n     * used to check if it the recognizer receives valid input, like input.distance > 10\n     * this should be overwritten\n     * @virtual\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return state | STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n\n        if (direction === DIRECTION_ALL) {\n            return [TOUCH_ACTION_NONE];\n        }\n\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input));\n    },\n\n    emit: function(input) {\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        this._super.emit.call(this, input);\n\n        var direction = directionStr(input.direction);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n    }\n});\n\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_PAN_X, TOUCH_ACTION_PAN_Y];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        this._super.emit.call(this, input);\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            this.manager.emit(this.options.event + inOut, input);\n        }\n    }\n});\n\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 500, // minimal time of the pointer to be pressed\n        threshold: 10 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeout(bindFn(this.emit, this), options.time);\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        this.manager.emit(this.options.event, this._input);\n    }\n});\n\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.65,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.velocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.velocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.velocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            velocity > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        this.manager.emit(this.options.event, input);\n\n        var direction = directionStr(input.direction);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n    }\n});\n\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        delay: 0, // delay after triggering the tap. useful if you don't want to recognize a tap on each touchend\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        movementBetween: 10, // a multi-tap can be a bit off the initial position\n        movementWhile: 2 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var self = this;\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.movementWhile;\n        var validTouchTime = input.deltaTime < options.time;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (input.eventType & INPUT_END && validMovement && validTouchTime && validPointers) {\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.movementBetween;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n            this.reset();\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                if (!options.delay) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeout(function() {\n                        self.state = STATE_RECOGNIZED;\n                        self.emit();\n                    }, options.delay);\n                    return STATE_BEGAN;\n                }\n            }\n            if (!options.delay) {\n                return STATE_BEGAN;\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * create an manager with a default set of recognizers\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    var manager = new Manager(element, options);\n\n    /**\n     * setup recognizers\n     * the defauls.recognizers contains an array like this;\n     * [ RecognizerClass, options, recognizeWith ],\n     * [ .... ]\n     */\n    var defaultRecognizers = manager.options.recognizers;\n    if (defaultRecognizers) {\n        each(defaultRecognizers, function(item) {\n            var recognizer = manager.add(new (item[0])(item[1]));\n            if (item[2]) {\n                recognizer.recognizeWith(item[2]);\n            }\n        });\n    }\n\n    return manager;\n}\n\nHammer.VERSION = '2.0.0dev';\n\nHammer.defaults = {\n    // when set to true, dom events are being triggered.\n    // but this is slower and unused by simple implementations, so disabled by default.\n    domEvents: false,\n\n    // this value is used when a touch-action isn't defined on the element.style\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    enable: true,\n\n    // default setup when calling Hammer()\n    recognizers: [\n        [RotateRecognizer, { enable: false }],\n        [PinchRecognizer, { enable: false }, 'rotate'],\n        [SwipeRecognizer,{ direction: DIRECTION_HORIZONTAL }],\n        [PanRecognizer, { direction: DIRECTION_HORIZONTAL }, 'swipe'],\n        [TapRecognizer],\n        [TapRecognizer, { event: 'doubletap', taps: 2 }, 'tap'],\n        [PressRecognizer]\n    ],\n\n    // with some style attributes you can improve the experience.\n    cssProps: {\n        // Disables text selection to improve the dragging gesture. When the value is `none` it also sets\n        // `onselectstart=false` for IE9 on the element. Mainly for desktop browsers.\n        userSelect: 'none',\n\n        // Disable the Windows Phone grippers when pressing an element.\n        touchSelect: 'none',\n\n        // Disables the default callout shown when you touch and hold a touch target.\n        // On iOS, when you touch and hold a touch target such as a link, Safari displays\n        // a callout containing information about the link. This property allows you to disable that callout.\n        touchCallout: 'none',\n\n        // Specifies whether zooming is enabled. Used by IE10>\n        contentZooming: 'none',\n\n        // Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n        userDrag: 'none',\n\n        // Overrides the highlight color shown when the user taps a link or a JavaScript\n        // clickable element in iOS. This property obeys the alpha value, if specified.\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    options = options || {};\n\n    this.options = merge(options, Hammer.defaults);\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {String} option\n     * @param {*} val\n     */\n    set: function(option, val) {\n        this.options[option] = val;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? 2 : 1;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        if (this.session.stopped) {\n            return;\n        }\n\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var session = this.session;\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is done, or this is a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        // we're in a active recognizer\n        for (var i = 0, len = this.recognizers.length; i < len; i++) {\n            recognizer = this.recognizers[i];\n\n            if (this.session.stopped !== 2 && (\n                    !curRecognizer || recognizer == curRecognizer ||\n                    recognizer.canRecognizeWith(curRecognizer))) {\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer}\n     */\n    add: function(recognizer) {\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     */\n    remove: function(recognizer) {\n        var recognizers = this.recognizers;\n        recognizer = this.get(recognizer);\n        recognizers.splice(inArray(recognizers, recognizer), 1);\n\n        this.touchAction.update();\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event];\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        for (var i = 0, len = handlers.length; i < len; i++) {\n            handlers[i](data);\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    var cssProps = manager.options.cssProps;\n\n    each(cssProps, function(value, name) {\n        element.style[prefixed(element.style, name)] = add ? value : '';\n    });\n\n    var falseFn = add && function() { return false; };\n    if (cssProps.userSelect == 'none') { element.onselectstart = falseFn; }\n    if (cssProps.userDrag == 'none') { element.ondragstart = falseFn; }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nHammer.INPUT_START = INPUT_START;\nHammer.INPUT_MOVE = INPUT_MOVE;\nHammer.INPUT_END = INPUT_END;\nHammer.INPUT_CANCEL = INPUT_CANCEL;\n\nHammer.STATE_POSSIBLE = STATE_POSSIBLE;\nHammer.STATE_BEGAN = STATE_BEGAN;\nHammer.STATE_CHANGED = STATE_CHANGED;\nHammer.STATE_ENDED = STATE_ENDED;\nHammer.STATE_RECOGNIZED = STATE_RECOGNIZED;\nHammer.STATE_CANCELLED = STATE_CANCELLED;\nHammer.STATE_FAILED = STATE_FAILED;\n\nHammer.DIRECTION_NONE = DIRECTION_NONE;\nHammer.DIRECTION_LEFT = DIRECTION_LEFT;\nHammer.DIRECTION_RIGHT = DIRECTION_RIGHT;\nHammer.DIRECTION_UP = DIRECTION_UP;\nHammer.DIRECTION_DOWN = DIRECTION_DOWN;\nHammer.DIRECTION_HORIZONTAL = DIRECTION_HORIZONTAL;\nHammer.DIRECTION_VERTICAL = DIRECTION_VERTICAL;\nHammer.DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nHammer.Manager = Manager;\nHammer.Input = Input;\nHammer.TouchAction = TouchAction;\n\nHammer.Recognizer = Recognizer;\nHammer.AttrRecognizer = AttrRecognizer;\nHammer.Tap = TapRecognizer;\nHammer.Pan = PanRecognizer;\nHammer.Swipe = SwipeRecognizer;\nHammer.Pinch = PinchRecognizer;\nHammer.Rotate = RotateRecognizer;\nHammer.Press = PressRecognizer;\n\nHammer.on = addEventListeners;\nHammer.off = removeEventListeners;\nHammer.each = each;\nHammer.merge = merge;\nHammer.extend = extend;\nHammer.inherit = inherit;\nHammer.bindFn = bindFn;\nHammer.prefixed = prefixed;\n\nif (typeof define == TYPE_FUNCTION && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != TYPE_UNDEFINED && module.exports) {\n    module.exports = Hammer;\n} else {\n    window.Hammer = Hammer;\n}\n\n})(window);","module.exports = __webpack_amd_options__;\r\n"],"sourceRoot":"webpack-module://"}