extends inclusion/base
block content
    .long-content
        :markdown
            # General API

            - [Hammer](#hammer)
            - [Hammer.defaults](#hammer-defaults)
            - [Hammer.Manager](hammer-manager)
            - [Hammer.Recognizer](#hammer-recognizer)
            - [Constants](#constants)
            - [Utils](#utils)

            ## Hammer
            Creates a Manager instance with a default set of recognizers and returns the manager instance. The default set
            contains `tap`, `doubletap`, `pan`, `swipe`, `press`, `pinch` and `rotate` recognizer instances.

            You should only use this when you're fine with the default setup, or have set your own initial setup.

            ### Contructor(HTMLElement, [options])
            Just your element, and options. the options will be merged with Hammer.defaults. Also,
            the recognizer set as defined in `Hammer.defaults.preset` will be added.

            If you'll pass an empty `recognizer` option, no initial recognizers will be added.

            ---

            ## Hammer.defaults
            The `touchAction` option accepts the `auto`, `pan-y`, `pan-x` and `none` values, just like the css property. By default
            it is set to `compute`, which computes the correct touchAction property based on the added recognizers.

            ### touchAction (compute)
            Accepts the `compute`, `auto`, `pan-y`, `pan-x` and `none` values. The default option will choose the
            correct value for you, based on the recognizers.

            ### domEvents (false)
            Let Hammer also fire DOM events. This is a bit slower, so disabled by default.

            ### enable (true)
            Acceps a boolean, or an function that should return a boolean which is.

            ### cssProps (object...)
            A collection of css properties that improve the handling of the input events.

            ### preset (array...)
            Default recognizer setup when calling `Hammer()`. When creating a new Manager these will be skipped.

            By default it adds a set of `tap`, `doubletap`, `press`, _horizontal_ `pan` and `swipe`, and the
            multi-touch `pinch` and `rotate` recognizers. The pinch and rotate recognizers are disabled by default
            because they would make the element blocking.

            ---

            ## Hammer.Manager
            The Manager is the container of all the recognizer instances for your element. It sets up the input
            event listeners, and sets the touch-action property for you on the element.

            ### constructor(HTMLElement, [options])
            Just your element, and options. the options will be merged with Hammer.defaults.

            You can setup an initial recognizer set with the option `recognizers`. The Array should be structured
            like this;
            ````js
            [
                // RecognizerClass, [options], [recognizeWith, ...], [requireFailure, ...]
                [Hammer.Rotate],
                [Hammer.Pinch, { enable: false }, ['rotate']],
                [Hammer.Swipe,{ direction: Hammer.DIRECTION_HORIZONTAL }],
            ]
            ````

            ### .set(name, value)
            Change an option on the manager instance. Using this method is recommended,
            because it will update the `touchAction` value if needed.

            ### .add(Recognizer), .get(Recognizer) and .remove(Recognizer)
            Add a new `Recognizer` instance to the Manager. The order of adding is also the order of the recognizers being
            executed. Just like the `get` method, it returns the added `Recognizer` instance.
            The `get` and `remove` methods takes the event name (from a recognizer) or a recognizer instance as an argument.

            ### .on(events, handler) and .off(events, [handler])
            Listen to events triggered by the added recognizers, or remove the binded events. Accepts multiple events seperated
            by a space.

            ### .stop([force])
            Stop recognizing for the current input session. When forced, the recognizer cycle is stopped immediately.

            ### .destroy()
            Unbinds all events and input events and makes the manager unusable. It does NOT unbind any domEvent listeners.

            ---

            ## Hammer.Recognizer
            Every Recognizer extends from this class. All recognizers also have the option `enable`,
            which is a boolean value or a callback function to enable/disable the recognizer on the fly.

            ### constructor([options])
            Just set the options.

            ### .set(name, value)
            Change an option on the recognizer instance. Using this method is recommended,
            because it will update the `touchAction` value if needed.

            ### .recognizeWith(otherRecognizer) and .dropRecognizeWith(otherRecognizer)
            Run the recognizer simultaneous with the given other recognizer, in both directions. This is usable for like
            combining a pan with a swipe at the end, or a pinch with the ability to rotate the target as well. Dropping the
            connection only removes the link on the recognizer, not on the other recognizer.
            - [Read more about recognizeWith](recognize-with.html)

            ### .requireFailure(otherRecognizer) and .dropRequireFailure(otherRecognizer)
            Run the recognizer only when the other recognizer fails. Dropping the connection only removes the link on the
            recognizer, not on the other recognizer.
            - [Read more about requireFailure](require-failure.html)

            ---

            ## Constants
            All constants are defined at the `Hammer` object.

            ### Directions
            | Name              | Value         |
            | -------------------|---------------|
            | DIRECTION_NONE    | 1             |
            | DIRECTION_LEFT    | 2             |
            | DIRECTION_RIGHT   | 4             |
            | DIRECTION_UP      | 8             |
            | DIRECTION_DOWN    | 16            |
            | DIRECTION_HORIZONTAL | 6          |
            | DIRECTION_VERTICAL   | 24         |
            | DIRECTION_ALL     | 30            |

            ### Input Events
            | Name              | Value         |
            | -------------------|---------------|
            | INPUT_START       | 1             |
            | INPUT_MOVE        | 2             |
            | INPUT_END         |  4            |
            | INPUT_CANCEL      | 8             |

            ### Recognizer States
            | Name              | Value         |
            | -------------------|---------------|
            | STATE_POSSIBLE | 1 |
            | STATE_BEGAN | 2 |
            | STATE_CHANGED | 4 |
            | STATE_ENDED | 8 |
            | STATE_RECOGNIZED | STATE_ENDED |
            | STATE_CANCELLED | 16 |
            | STATE_FAILED | 32 |

            ---

            ## Utils
            ### Hammer.on(HTMLElement, types, handler)
            Wrapper around `addEventListener` that accepts multiple event types.

            ### Hammer.off(HTMLElement, types, handler)
            Wrapper around `removeEventListener` that accepts multiple event types.

            ### Hammer.each(obj, handler)
            Iterate an object or array.

            ### Hammer.merge(obj1, obj2)
            Merge properties from obj2 into obj1. Properties won't be overwritten.

            ### Hammer.extend(obj1, obj2)
            Extend obj1 with the properties from obj2. Properties will be overwritten.

            ### Hammer.inherit(child, base, [properties])
            Simple class inheritance.

            ````js
            function Animal(name) {
                this.name = name;
            }

            function Dog() {
                Animal.apply(this, arguments);
            }

            Hammer.inherit(Dog, Animal, {
                bark: function() {
                    alert(this.name);
                }
            });

            var dog = new Dog('Spaikie');
            dog.bark();
            ````

            ### Hammer.bindFn(fn, scope)
            Simple alternative for `Function.bind`.

            ### Hammer.prefixed(obj, name)
            Get the (prefixed) property from the browser.

            ````js
            var userSelect = Hammer.prefixed(document.body.style, 'userSelect');
            console.log(userSelect); // webkitUserSelect on Chrome 35
            ````
